{"version":3,"sources":["redux/actions.js","components/posts/post.js","components/posts/input.js","components/posts/modalPost.js","components/posts/postsForm.js","components/users/user/user.js","components/users/usersList/userList.js","components/comments/comment.js","components/comments/inputComment.js","components/comments/modalComment.js","components/comments/commentsform.js","App.js","redux/reducer/postReducer.js","redux/reducer/usersReducer.js","redux/reducer/commentReducer.js","redux/reducer/reducer.js","redux/store.js","index.js"],"names":["GET_USERS_REQUEST","GET_USERS_SUCCESS","POST_POSTS_REQUEST","POST_POSTS_SUCCESS","SELECT_ITEM","GET_POSTS_REQUEST","GET_POSTS_SUCCESS","SELECT_POST","SELECT_COMMENT","GET_COMMENT_REQUEST","GET_COMMENT_SUCCESS","EDIT_COMMENT_REQUEST","EDIT_COMMENT_SUCCESS","postsURL","getPosts","dispatch","type","axios","get","then","result","payload","data","catch","err","console","log","getUsers","getComments","Post","props","id","body","InputPost","useState","text","obj","setObj","className","name","placeholder","onChange","event","value","onFormChange","target","onClick","object","userId","addPost","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","ModalWindow","React","modalIsOpen","setIsOpen","isOpen","onRequestClose","style","contentLabel","Posts","postsList","posts","filter","item","map","to","onSelectPost","user","users","Number","username","User","UsersList","list","onSelectItem","Comment","email","InputComment","postId","editComment","ModalComment","Comments","commentsList","comments","onSelectComment","deleteComment","specificPost","connect","store","comment","commentId","post","selectItem","Id","a","fetch","method","JSON","stringify","headers","response","json","error","selectPost","editComments","selectComment","useEffect","path","initialState","Reducer","combineReducers","state","action","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"iVAEaA,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAqB,qBACrBC,EAAqB,qBACrBC,EAAc,cACdC,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAc,cACdC,EAAiB,iBACjBC,EAAsB,sBACtBC,EAAsB,sBACtBC,EAAuB,uBACvBC,EAAuB,uBA+D9BC,EAAW,6CAEJC,EAAW,WACpB,OAAO,SAAAC,GACHA,EAjDE,CACFC,KAAMX,IAiDNY,IACCC,IAAIL,GACJM,MAAK,SAAAC,GAhDU,IAACC,EAiDLN,GAjDKM,EAiDoBD,EAAOE,KAhD1C,CACFN,KAAMV,EACNe,gBAgDME,OAAM,SAAAC,GAAQC,QAAQC,IAAIF,QAM3BG,EAAW,WACpB,OAAO,SAAAZ,GACHA,EA5EE,CACFC,KAAMhB,IA4ENiB,IACCC,IANQ,8CAORC,MAAK,SAAAC,GA3EU,IAACC,EA4ELN,GA5EKM,EA4EoBD,EAAOE,KA3E1C,CACFN,KAAMf,EACNoB,gBA2EME,OAAM,SAAAC,GAAQC,QAAQC,IAAIF,QA2C3BI,EAAc,WACvB,OAAO,SAAAb,GACHA,EAtGE,CACFC,KAAMP,IAsGNQ,IACCC,IANW,0DAOXC,MAAK,SAAAC,GApGa,IAACC,EAqGRN,GArGQM,EAqGoBD,EAAOE,KApG7C,CACFN,KAAMN,EACNW,gBAoGME,OAAM,SAAAC,GAAQC,QAAQC,IAAIF,Q,OCrJ3BK,EAAO,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAElB,OACI,qBAAsBC,GAAMD,EAAMC,GAAlC,SACI,sCAASD,EAAME,SADPF,EAAMC,K,wCCHbE,G,MAAY,SAACH,GAAU,IAAD,EACTI,mBAAS,CAACC,KAAO,KADR,mBACxBC,EADwB,KACnBC,EADmB,KAiB/B,OACI,sBAAKC,UAAY,eAAjB,UACI,qBAAKA,UAAY,YAAjB,SACI,uBAAOtB,KAAO,OAAOuB,KAAO,OAAQC,YAAc,uBAClDC,SAAW,SAACC,GAAD,OAnBF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAQJ,EAAQ,EAARA,KAC3BF,EAAO,2BAAID,GAAL,kBAAWG,EAAQI,KAkBKC,CAAaF,EAAMG,SAASF,MAASP,EAAID,SAE/D,wBAAQnB,KAAO,SAASsB,UAAY,aAAaQ,QAlBvC,WAClB,GAAgB,KAAbV,EAAID,KACP,CACA,IAAIY,EAAS,CACTC,OAASlB,EAAMC,GACfC,KAAOI,EAAID,MAEfE,EAAO,CAACF,KAAO,KACfL,EAAMmB,QAAQF,KAUN,sBCtBVG,EAAe,CACnBC,QAAU,CACRC,IAAwB,MACxBC,KAAwB,MACxBC,MAAwB,OACxBC,OAAwB,OACxBC,YAAwB,OACxBC,UAAwB,0BAI5BC,IAAMC,cAAc,SAEb,IAAOC,EAAc,SAAC9B,GAAU,IAAD,EACJ+B,IAAM3B,UAAS,GADX,mBAC7B4B,EAD6B,KACjBC,EADiB,KAWlC,OACE,gCACE,wBAAQ/C,KAAO,SAASsB,UAAY,kBAAmBQ,QAX7D,WACEiB,GAAU,IAUN,4BACA,cAAC,IAAD,CACEC,OAAQF,EACRG,eATR,WACEF,GAAU,IASJG,MAAOhB,EACPiB,aAAa,gBAJf,SAOE,+BACE,cAAC,EAAD,CAAWlB,QAAWnB,EAAMmB,QAASlB,GAAMD,EAAMC,a,QChChDqC,EAAQ,SAACtC,GAClB,IACIuC,EADOvC,EAAMwC,MAAMC,QAAO,SAAAC,GAAI,OAAIA,EAAKxB,SAAWlB,EAAMkB,UACvCyB,KAAI,SAAAD,GACrB,OACA,sBAAKlC,UAAY,iBAAiCP,GAAMyC,EAAKzC,GAA7D,UACI,qBAAMO,UAAY,OAAlB,SACI,cAAC,EAAD,CAAMR,MAAS0C,MAEnB,8BACI,cAAC,IAAD,CAAME,GAAK,QAAX,SACI,wBAAQ1D,KAAM,SAASsB,UAAY,kBAAkBQ,QAAS,kBAAMhB,EAAM6C,aAAaH,EAAKzC,KAA5F,iCAN6ByC,EAAKzC,OAY9C6C,EAAO9C,EAAM+C,MAAMN,QAAO,SAAAC,GAAS,OAAOA,EAAKzC,KAAO+C,OAAOhD,EAAMkB,WACjET,EAAOqC,EAAKH,KAAI,SAAAD,GAAI,OAAIA,EAAKjC,QAC7BwC,EAAWH,EAAKH,KAAI,SAAAD,GAAI,OAAIA,EAAKO,YAGvC,OACI,gCACI,sBAAKzC,UAAY,SAAjB,UACI,sBAAKA,UAAY,SAAjB,UACI,qBAAKA,UAAY,YAAjB,SAA8BC,IAC9B,qBAAKD,UAAY,gBAAjB,SAAkC,IAAMyC,OAE5C,oCAAM,cAAC,EAAD,CAAa9B,QAAWnB,EAAMmB,QAASlB,GAAMD,EAAMkB,eAExDqB,M,OClCJW,G,MAAO,SAAC,GAAW,IAAVlD,EAAS,EAATA,MAClB,OACI,qBAAsBC,GAAMD,EAAMC,GAAlC,SACI,sBAAKO,UAAY,SAAjB,UACI,qBAAKA,UAAY,OAAjB,SAAyBR,EAAMS,OAC/B,qBAAKD,UAAY,WAAjB,SAA6B,IAAMR,EAAMiD,eAHrCjD,EAAMC,MCCbkD,G,MAAY,SAACnD,GACtB,IAAIoD,EAAOpD,EAAM+C,MAAMJ,KAAI,SAAAG,GACvB,OACI,sBAAKtC,UAAY,WAA2BP,GAAM6C,EAAK7C,GAAvD,UACI,qBAAMO,UAAY,OAAlB,SACI,cAAC,EAAD,CAAMR,MAAO8C,MAEjB,8BACI,cAAC,IAAD,CAAMF,GAAK,SAAX,SACI,wBAAQ1D,KAAO,SAASsB,UAAY,iBAAiBQ,QAAS,kBAAMhB,EAAMqD,aAAaP,EAAK7C,KAA5F,2BANuB6C,EAAK7C,OAYhD,OACI,gCACI,qBAAKO,UAAY,QAAjB,SAAyB,yCACxB4C,OCrBAE,EAAU,SAAC,GAAa,IAAZtD,EAAW,EAAXA,MAErB,OACI,sBAAsBC,GAAMD,EAAMC,GAAlC,UACI,sBAAKO,UAAY,iBAAjB,UACI,sBAAKA,UAAY,eAAjB,eAAmCR,EAAMS,QACzC,sBAAKD,UAAY,QAAjB,cAA2BR,EAAMuD,YAErC,qBAAK/C,UAAY,eAAjB,SAAiCR,EAAME,SAL/BF,EAAMC,KCHbuD,EAAe,SAACxD,GAAU,IAAD,EACZI,mBAAS,CAACC,KAAO,KADL,mBAC3BC,EAD2B,KACtBC,EADsB,KAmBlC,OACI,sBAAKC,UAAY,eAAjB,UACI,qBAAKA,UAAY,YAAjB,SACI,uBAAOtB,KAAO,OAAOuB,KAAO,OAAQC,YAAc,uBAClDC,SAAW,SAACC,GAAD,OArBF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAQJ,EAAQ,EAARA,KAC3BF,EAAO,2BAAID,GAAL,kBAAWG,EAAQI,KAoBKC,CAAaF,EAAMG,SAASF,MAASP,EAAID,SAE/D,wBAAQnB,KAAO,SAASsB,UAAY,aAAaQ,QApBvC,WAClB,GAAgB,KAAbV,EAAID,KACP,CACA,IAAIY,EAAS,CACTwC,OAAS,WACThD,KAAO,aACP8C,MAAQ,cACRrD,KAAOI,EAAID,MAEfE,EAAO,CAACF,KAAO,KACfL,EAAM0D,YAAYzC,KAUV,8BCxBVG,EAAe,CACnBC,QAAU,CACRC,IAAwB,MACxBC,KAAwB,MACxBC,MAAwB,OACxBC,OAAwB,OACxBC,YAAwB,OACxBC,UAAwB,0BAI5BC,IAAMC,cAAc,SAEb,IAAO8B,EAAe,SAAC3D,GAAU,IAAD,EACL+B,IAAM3B,UAAS,GADV,mBAC9B4B,EAD8B,KAClBC,EADkB,KAWnC,OACE,gCACE,wBAAQ/C,KAAO,SAASsB,UAAY,qBAAsBQ,QAXhE,WACEiB,GAAU,IAUN,oBACA,cAAC,IAAD,CACEC,OAAQF,EACRG,eATR,WACEF,GAAU,IASJG,MAAOhB,EAHT,SAKE,+BACE,cAAC,EAAD,CAAcsC,YAAe1D,EAAM0D,sBChClCE,G,MAAW,SAAC5D,GACrB,IACI6D,EADU7D,EAAM8D,SAASrB,QAAO,SAAAC,GAAI,OAAIA,EAAKe,SAAWzD,EAAMyD,UACvCd,KAAI,SAAAD,GAC3B,OACA,sBAAKlC,UAAY,oBAAoCP,GAAMyC,EAAKzC,GAAhE,UACI,qBAAMO,UAAY,UAAlB,SACI,cAAC,EAAD,CAASR,MAAS0C,MAEtB,sBAAKlC,UAAY,kBAAjB,UACI,qBAAKQ,QAAW,kBAAMhB,EAAM+D,gBAAgBrB,EAAKzC,KAAjD,SACI,cAAC,EAAD,CAAcyD,YAAe1D,EAAM0D,gBAEvC,8BACI,wBAAQxE,KAAO,SAASsB,UAAY,qBAAqBQ,QAAW,WAAOhB,EAAMgE,iBAAjF,6BATgCtB,EAAKzC,OAgB/CgE,EADKjE,EAAMwC,MAAMC,QAAO,SAAAC,GAAS,OAAOA,EAAKzC,KAAO+C,OAAOhD,EAAMyD,WAC7Cd,KAAI,SAAAD,GAAI,OAAIA,EAAKxC,QAG3C,OACI,gCACI,qBAAKM,UAAY,eAAjB,SAAiCyD,IAChCJ,OCGb,IAyBeK,eAZS,SAAAC,GAEpB,OADFxE,QAAQC,IAAI,YAAauE,EAAMC,QAAQC,WAC/B,CACJtB,MAAQoB,EAAMrB,KAAKtD,KACnB0B,OAASiD,EAAMG,KAAKpD,OACpBsB,MAAQ2B,EAAMG,KAAK9E,KACnBiE,OAASU,EAAMC,QAAQX,OACvBK,SAAWK,EAAMC,QAAQ5E,KACzB6E,UAAYF,EAAMC,QAAQC,cArBJ,SAACpF,GAC3B,MAAM,CACFY,SAAW,kBAAOZ,EAASY,MAC3Bb,SAAW,kBAAMC,EAASD,MAC1Bc,YAAc,kBAAMb,EAASa,MAC7ByE,WAAY,SAACC,GAAD,OAAQvF,EXkBf,CACHC,KAAMZ,EACNiB,QWpBsCiF,KACxCrD,QAAU,SAAA5B,GAAO,OAAIN,EX+EH,SAAC,GAAqB,IACpCO,EAAO,CACT0B,OAFqC,EAAlBA,OAGnBhB,KAHqC,EAAVA,MAK/B,8CAAO,WAAMjB,GAAN,iBAAAwF,EAAA,6DACHxF,EAjBG,CACHC,KAAOd,IAeJ,kBAGwBsG,MAAM3F,EAAU,CACrC4F,OAAQ,OACRzE,KAAM0E,KAAKC,UAAUrF,GACrBsF,QAAS,CACP,eAAgB,sBAPrB,cAGOC,EAHP,gBASoBA,EAASC,OAT7B,OASOA,EATP,OAUCrF,QAAQC,IAAI,WAAYgF,KAAKC,UAAUG,IAVxC,kDAaCrF,QAAQsF,MAAM,SAAd,MAbD,0DAAP,sDWpFgC9D,CAAQ5B,KACtC2F,WAAa,SAAAjF,GAAE,OAAIhB,EXuBd,CACHC,KAAMT,EACNc,QWzBqCU,KACvCkF,aAAe,SAAA5F,GAAO,OAAIN,EX8HJ,SAAC,GAAY,IAC/BO,EAAO,CACTU,KAFgC,EAAVA,MAK1B,8CAAO,WAAMjB,GAAN,iBAAAwF,EAAA,6DACHxF,EAjBE,CACFC,KAAOL,IAeJ,kBAGwB6F,MAAM3F,EAAU,CACrC4F,OAAQ,MACRzE,KAAM0E,KAAKC,UAAUrF,GACrBsF,QAAS,CACP,eAAgB,sBAPrB,cAGOC,EAHP,gBASoBA,EAASC,OAT7B,OASOA,EATP,OAUCrF,QAAQC,IAAI,WAAYgF,KAAKC,UAAUG,IAVxC,kDAaCrF,QAAQsF,MAAM,SAAd,MAbD,0DAAP,sDWnIqCE,CAAa5F,KAChD6F,cAAgB,SAAAnF,GAAE,OAAIhB,EX2BjB,CACHC,KAAMR,EACNa,QW7B2CU,QAgBpCiE,EAlDf,SAAalE,GAOX,OALDqF,oBAAUrF,EAAMH,SAAU,IAC1BwF,oBAAUrF,EAAMhB,SAAU,IAC1BqG,oBAAUrF,EAAMF,YAAa,IAI1B,gCACE,qBAAKU,UAAY,WAEX,oBAAIA,UAAY,OAAhB,SACI,6BAAK,cAAC,IAAD,CAAMoC,GAAG,SAAT,uBAEZ,8BACC,eAAC,IAAD,WACI,cAAC,IAAD,CAAQ0C,KAAO,SAAf,SAAwB,cAAC,EAAD,CAAWvC,MAAO/C,EAAM+C,MAAOM,aAAgBrD,EAAMuE,eAC7E,cAAC,IAAD,CAAOe,KAAO,SAAd,SAAwB,cAAC,EAAD,CAAO9C,MAASxC,EAAMwC,MAAOO,MAAS/C,EAAM+C,MAAO7B,OAAUlB,EAAMkB,OAASC,QAAWnB,EAAMmB,QAAS0B,aAAgB7C,EAAMkF,eACpJ,eAAC,IAAD,CAAOI,KAAO,QAAd,UAAsB,cAAC,EAAD,CAAU9C,MAASxC,EAAMwC,MAAOsB,SAAY9D,EAAM8D,SAAUL,OAAUzD,EAAMyD,OAAQC,YAAe1D,EAAMmF,aAAcpB,gBAAmB/D,EAAMoF,gBAAtK,kB,gBCzBRG,EAAe,CACjBrE,OAAS,KACT1B,KAAO,CAAC,KCFN+F,GAAe,CACjB/F,KAAO,CAAC,KCDN+F,GAAe,CACjB9B,OAAS,KACTY,UAAY,KACZ7E,KAAO,CAAC,KCACgG,GAAUC,YAAgB,CAC/B3C,KFAoB,WAAiC,IAAhC4C,EAA+B,uDAAvBH,GAAcI,EAAS,uCACxD,OAAQA,EAAOzG,MACX,KAAKhB,EACD,OAAO,eAAIwH,GACf,KAAKvH,EACD,OAAO,2BAAIuH,GAAX,IAAkBlG,KAAMmG,EAAOpG,UACnC,KAAKjB,EACD,OAAO,2BAAIoH,GAAX,IAAkBxE,OAAQyE,EAAOpG,UACrC,QACI,OAAOmG,IERXpB,KHAqB,WAAiC,IAAhCoB,EAA+B,uDAAvBH,EAAcI,EAAS,uCACzD,OAAQA,EAAOzG,MACX,KAAKZ,EACD,OAAO,2BAAIoH,GAAX,IAAkBxE,OAASyE,EAAOpG,UACtC,KAAKhB,EACD,OAAO,eAAImH,GACf,KAAKlH,EACD,OAAO,2BAAIkH,GAAX,IAAkBlG,KAAOmG,EAAOpG,UACpC,KAAKnB,EAEL,KAAKC,EACG,OAAO,eAAKqH,GACpB,QACI,OAAOA,IGZXtB,QDAuB,WAAiC,IAAhCsB,EAA+B,uDAAvBH,GAAcI,EAAS,uCAC3D,OAAQA,EAAOzG,MACX,KAAKT,EACD,OAAO,2BAAIiH,GAAX,IAAkBjC,OAASkC,EAAOpG,UACtC,KAAKb,EACD,OAAO,2BAAIgH,GAAX,IAAkBrB,UAAYsB,EAAOpG,UACzC,KAAKZ,EACD,OAAO,eAAI+G,GACf,KAAK9G,EACD,OAAO,2BAAI8G,GAAX,IAAkBlG,KAAOmG,EAAOpG,UACpC,KAAKV,EACD,sBAAU6G,GACd,KAAK5G,EACD,OAAO,eAAI4G,GAAS/F,QAAQC,IAAI,WACpC,QACI,OAAO8F,MElBNvB,GAAQyB,YAAYJ,GAASK,YAAgBC,MCG1DC,IAASC,OACP,cAAC,IAAD,CAAU7B,MAAOA,GAAjB,SACE,cAAC,IAAD,UACG,cAAC,EAAD,QAGL8B,SAASC,eAAe,W","file":"static/js/main.c9986948.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const GET_USERS_REQUEST = 'GET_USERS_REQUEST';\r\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\r\nexport const POST_POSTS_REQUEST = 'POST_POSTS_REQUEST';\r\nexport const POST_POSTS_SUCCESS = 'POST_POSTS_SUCCESS';\r\nexport const SELECT_ITEM = 'SELECT_ITEM';\r\nexport const GET_POSTS_REQUEST = 'GET_POSTS_REQUEST';\r\nexport const GET_POSTS_SUCCESS = 'GET_POSTS_SUCCESS';\r\nexport const SELECT_POST = 'SELECT_POST';\r\nexport const SELECT_COMMENT = 'SELECT_COMMENT';\r\nexport const GET_COMMENT_REQUEST = 'GET_COMMENT_REQUEST';\r\nexport const GET_COMMENT_SUCCESS = 'GET_COMMENT_SUCCESS';\r\nexport const EDIT_COMMENT_REQUEST = 'EDIT_COMMENT_REQUEST';\r\nexport const EDIT_COMMENT_SUCCESS = 'EDIT_COMMENT_SUCCESS';\r\n\r\n\r\n\r\nconst getUsersRequest = ()=> {\r\n    return{\r\n        type: GET_USERS_REQUEST\r\n    }\r\n};\r\nconst getUsersSuccess = (payload)=>{\r\n    return{\r\n        type: GET_USERS_SUCCESS,\r\n        payload\r\n    }\r\n};\r\n\r\n\r\nconst getPostsRequest = ()=> {\r\n    return{\r\n        type: GET_POSTS_REQUEST\r\n    }\r\n};\r\nconst getPostsSuccess = (payload)=>{\r\n    return{\r\n        type: GET_POSTS_SUCCESS,\r\n        payload\r\n    }\r\n};\r\n\r\nconst getCommentsRequest = () => {\r\n    return{\r\n        type: GET_COMMENT_REQUEST\r\n    }\r\n}\r\n\r\nconst getCommentsSuccess = (payload) => {\r\n    return{\r\n        type: GET_COMMENT_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const selectItem = (newId) => {\r\n    return {\r\n        type: SELECT_ITEM,\r\n        payload: newId\r\n    }\r\n};\r\n\r\nexport const selectPost = (newId) => {\r\n    return {\r\n        type: SELECT_POST,\r\n        payload: newId\r\n    }\r\n};\r\nexport const selectComment = (newId) => {\r\n    return {\r\n        type: SELECT_COMMENT,\r\n        payload: newId\r\n    }\r\n};\r\n\r\n\r\nconst postsURL = 'https://jsonplaceholder.typicode.com/posts';\r\n\r\nexport const getPosts = () => {\r\n    return dispatch => {\r\n        dispatch(getPostsRequest());\r\n        axios\r\n        .get(postsURL)\r\n        .then(result => {\r\n                    dispatch(getPostsSuccess(result.data))\r\n                }\r\n            ).catch(err => {console.log(err)})\r\n    }\r\n};\r\n\r\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\r\n\r\nexport const getUsers = () => {\r\n    return dispatch => {\r\n        dispatch(getUsersRequest());\r\n        axios\r\n        .get(usersURL)\r\n        .then(result => {\r\n                    dispatch(getUsersSuccess(result.data))\r\n                }\r\n            ).catch(err => {console.log(err)})\r\n    }\r\n}\r\n\r\n\r\n\r\nconst postPostRequest = () => {\r\n    return {\r\n        type:  POST_POSTS_REQUEST\r\n    }\r\n};\r\nconst postPostSuccess = (payload) => {\r\n    return {\r\n        type: POST_POSTS_SUCCESS,\r\n        payload \r\n    }\r\n};\r\n\r\nexport  const addPost = ({ userId, body}) => {\r\n    const data = {\r\n        userId,\r\n        body\r\n    }\r\n    return async dispatch => {\r\n        dispatch(postPostRequest());\r\n        try {\r\n            const response = await fetch(postsURL, {\r\n              method: 'POST', \r\n              body: JSON.stringify(data), \r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              }});\r\n            const json = await response.json();\r\n            console.log('Success:', JSON.stringify(json));\r\n            postPostSuccess(json)\r\n          } catch (error) {\r\n            console.error('Error:', error);\r\n          }\r\n        }\r\n}\r\n\r\nconst commentsURL = 'https://jsonplaceholder.typicode.com/comments?postId=1';\r\n\r\nexport const getComments = () => {\r\n    return dispatch => {\r\n        dispatch(getCommentsRequest());\r\n        axios\r\n        .get(commentsURL)\r\n        .then(result => {\r\n                    dispatch(getCommentsSuccess(result.data))\r\n                }\r\n            ).catch(err => {console.log(err)})\r\n    }\r\n}\r\n\r\nconst editCommentsRequest = () =>{\r\n    return{\r\n        type : EDIT_COMMENT_REQUEST\r\n    }\r\n}\r\nconst editCommentsSuccess = payload => {\r\n    return{\r\n        type : EDIT_COMMENT_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport const editComments = ({body}) => {\r\n    const data = {\r\n        body\r\n    }\r\n\r\n    return async dispatch => {\r\n        dispatch(editCommentsRequest());\r\n        try {\r\n            const response = await fetch(postsURL, {\r\n              method: 'PUT', \r\n              body: JSON.stringify(data), \r\n              headers: {\r\n                'Content-Type': 'application/json'\r\n              }});\r\n            const json = await response.json();\r\n            console.log('Success:', JSON.stringify(json));\r\n            editCommentsSuccess(json)\r\n          } catch (error) {\r\n            console.error('Error:', error);\r\n          }\r\n        }\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const Post = ({props}) => {\r\n\r\n    return (\r\n        <div key = {props.id} id = {props.id}>\r\n            <span>  {props.body}</span>\r\n        </div>\r\n    \r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './posts.css';\r\n\r\nexport const InputPost = (props) =>{\r\n    const [obj, setObj] = useState({text : ''})\r\n    const onFormChange = ({value , name})=>{\r\n        setObj({...obj, [name] : value});\r\n    } \r\n    const onButtonClick = ()=>{\r\n        if(obj.text !== '')\r\n        {\r\n        let object = {\r\n            userId : props.id,\r\n            body : obj.text,\r\n        };\r\n        setObj({text : ''})\r\n        props.addPost(object);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className = 'input-button'>\r\n            <div className = 'add-input'>\r\n                <input type = 'text' name = 'text'  placeholder = 'type something here '\r\n                onChange ={(event) => onFormChange(event.target)} value = {obj.text}/>\r\n            </div>\r\n                <button type = 'button' className = 'add-button' onClick = {onButtonClick}>add</button> \r\n            </div>\r\n        )\r\n\r\n}","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport {InputPost} from './input'\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n    transform             : 'translate(-50%, -50%)'\r\n  }\r\n};\r\n\r\nModal.setAppElement('#root')\r\n\r\nexport const  ModalWindow = (props) =>{\r\n  const [modalIsOpen,setIsOpen] = React.useState(false);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n\r\n\r\n  function closeModal(){\r\n    setIsOpen(false);\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <button type = 'button' className = 'button-add-post'  onClick={openModal} > add new post </button>\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={closeModal}\r\n          style={customStyles}\r\n          contentLabel=\"Example Modal\"\r\n        >\r\n         {/* <button onClick={closeModal}>close</button>*/} \r\n          <form>\r\n            <InputPost addPost = {props.addPost} id = {props.id} />\r\n          </form>\r\n        </Modal>\r\n      </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Post} from './post';\r\nimport {ModalWindow} from './modalPost';\r\nimport {Link} from \"react-router-dom\";\r\nimport './posts.css'\r\n\r\n\r\nexport const Posts = (props) =>{\r\n    let post = props.posts.filter(item => item.userId === props.userId)\r\n    let postsList = post.map(item =>{\r\n        return(\r\n        <div className = 'post-container' key = {item.id} id = {item.id}>\r\n            <div  className = 'post'>\r\n                <Post props = {item} />\r\n            </div>\r\n            <div >\r\n                <Link to = '/Post'>\r\n                    <button type= 'button' className = 'button-add-post' onClick={() => props.onSelectPost(item.id)}>view comments</button>\r\n                </Link>\r\n            </div>\r\n        </div>\r\n        )\r\n    } )\r\n    let user = props.users.filter(item => {return(item.id === Number(props.userId))})\r\n    const name = user.map(item => item.name);\r\n    const username = user.map(item => item.username);\r\n\r\n    \r\n    return(\r\n        <div>\r\n            <div className = 'header'>\r\n                <div className = 'author'>\r\n                    <div className = 'name-post'>{name}</div>\r\n                    <div className = 'username-post'>{'@' + username}</div>\r\n                </div>\r\n                <div> <ModalWindow addPost = {props.addPost} id = {props.userId}/></div>\r\n            </div>\r\n                {postsList}\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\nimport './user.css';\r\n\r\nexport const User = ({props})=>{\r\n    return(\r\n        <div key = {props.id} id = {props.id} >\r\n            <div className = 'person'>\r\n                <div className = 'name'>{props.name}</div>\r\n                <div className = 'username'>{'@' + props.username}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n  };","import React from 'react';\r\nimport {User} from '../user/user';\r\nimport './userList.css';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nexport const UsersList = (props)=> {\r\n    let list = props.users.map(user=>{\r\n        return(\r\n            <div className = 'userlist' key = {user.id} id = {user.id} >\r\n                <div  className = 'user' >\r\n                    <User props={user} />\r\n                </div> \r\n                <div  > \r\n                    <Link to = '/Posts'  >\r\n                        <button type = 'button' className = 'button-details' onClick={() => props.onSelectItem(user.id)}>Details</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            \r\n            )})\r\n    return(\r\n        <div >\r\n            <div className = 'users'><h2>USERS</h2></div>\r\n            {list}\r\n        </div>\r\n        )\r\n};","import React from 'react';\r\n\r\n\r\nexport const Comment = ({props}) => {\r\n\r\n    return (\r\n        <div key = {props.id} id = {props.id} >\r\n            <div className = 'author-comment' >\r\n                <div className = 'name-comment'>  {props.name}</div>\r\n                <div className = 'email'> {props.email}</div>\r\n            </div>\r\n            <div className = 'comment-body'>{props.body}</div>            \r\n\r\n         </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport '../posts/posts.css';\r\n\r\nexport const InputComment = (props) =>{\r\n    const [obj, setObj] = useState({text : ''})\r\n    const onFormChange = ({value , name})=>{\r\n        setObj({...obj, [name] : value});\r\n    } \r\n    const onButtonClick = ()=>{\r\n        if(obj.text !== '')\r\n        {\r\n        let object = {\r\n            postId : 'props.id',\r\n            name : 'props.name',\r\n            email : 'props.email',\r\n            body : obj.text,\r\n        };\r\n        setObj({text : ''})\r\n        props.editComment(object);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className = 'input-button'>\r\n            <div className = 'add-input'>\r\n                <input type = 'text' name = 'text'  placeholder = 'type something here '\r\n                onChange ={(event) => onFormChange(event.target)} value = {obj.text}/>\r\n            </div>\r\n                <button type = 'button' className = 'add-button' onClick = {onButtonClick}>save changes</button> \r\n            </div>\r\n        )\r\n\r\n}","import React from 'react';\r\nimport Modal from 'react-modal';\r\nimport {InputComment} from './inputComment'\r\n\r\nconst customStyles = {\r\n  content : {\r\n    top                   : '50%',\r\n    left                  : '50%',\r\n    right                 : 'auto',\r\n    bottom                : 'auto',\r\n    marginRight           : '-50%',\r\n    transform             : 'translate(-50%, -50%)'\r\n  }\r\n};\r\n\r\nModal.setAppElement('#root')\r\n\r\nexport const  ModalComment = (props) =>{\r\n  const [modalIsOpen,setIsOpen] = React.useState(false);\r\n  function openModal() {\r\n    setIsOpen(true);\r\n  }\r\n\r\n\r\n  function closeModal(){\r\n    setIsOpen(false);\r\n  }\r\n\r\n    return (\r\n      <div>\r\n        <button type = 'button' className = 'edit-delete-button'  onClick={openModal} > edit </button>\r\n        <Modal\r\n          isOpen={modalIsOpen}\r\n          onRequestClose={closeModal}\r\n          style={customStyles}\r\n        >\r\n          <form>\r\n            <InputComment editComment = {props.editComment}  />\r\n          </form>\r\n        </Modal>\r\n      </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Comment} from './comment';\r\nimport {ModalComment} from './modalComment'\r\nimport './comments.css';\r\n\r\nexport const Comments = (props) =>{\r\n    let comment = props.comments.filter(item => item.postId === props.postId)\r\n    let commentsList = comment.map(item =>{\r\n        return(\r\n        <div className = 'comment-container' key = {item.id} id = {item.id}>\r\n            <div  className = 'comment'>\r\n                <Comment props = {item} />\r\n            </div>\r\n            <div className = 'buttons-comment'>\r\n                <div onClick = {() => props.onSelectComment(item.id)}>\r\n                    <ModalComment editComment = {props.editComment} />\r\n                </div>\r\n                <div>\r\n                    <button type = 'button' className = 'edit-delete-button' onClick = {() => {props.deleteComment()}}> delete </button>\r\n                </div> \r\n            </div>\r\n        </div>\r\n        )\r\n    } )\r\n    let post = props.posts.filter(item => {return(item.id === Number(props.postId))})\r\n    const specificPost = post.map(item => item.body);\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div className = 'specificPost'>{specificPost}</div>\r\n            {commentsList}\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport {connect} from \"react-redux\";\nimport React, {useEffect} from \"react\";\nimport {getUsers,  selectItem, getPosts, addPost, selectPost, getComments, editComments, selectComment} from \"./redux/actions\";\nimport {Posts} from './components/posts/postsForm';\nimport {Switch,Link,Route} from \"react-router-dom\";\nimport {UsersList} from './components/users/usersList/userList';\nimport {Comments} from './components/comments/commentsform';\n\nfunction App(props) {\n\n useEffect(props.getUsers, [])\n useEffect(props.getPosts, [])\n useEffect(props.getComments, [])\n\n\n  return (\n    <div >\n      <div className = 'header'>\n        </div>\n            <ul className = 'menu'>\n                <li ><Link to=\"/users\">Users</Link></li>\n            </ul>\n         <div>\n          <Switch>\n              <Route  path = '/users'><UsersList users={props.users} onSelectItem = {props.selectItem}/></Route>\n              <Route path = '/Posts' ><Posts posts = {props.posts} users = {props.users} userId = {props.userId}  addPost = {props.addPost} onSelectPost = {props.selectPost}/></Route>\n              <Route path = '/Post'><Comments posts = {props.posts} comments = {props.comments} postId = {props.postId} editComment = {props.editComments} onSelectComment = {props.selectComment}/> </Route>\n          </Switch>\n        </div>\n      </div>\n  );\n}\n\nconst  mapDispatchToProps = (dispatch) =>{\n  return{\n      getUsers : () =>  dispatch(getUsers()),\n      getPosts : () => dispatch(getPosts()),\n      getComments : () => dispatch(getComments()),\n      selectItem: (Id) => dispatch(selectItem(Id)),\n      addPost : payload => dispatch(addPost(payload)),\n      selectPost : id => dispatch(selectPost(id)),\n      editComments : payload => dispatch(editComments(payload)),\n      selectComment : id => dispatch(selectComment(id))\n\n}\n};\nconst mapStateToProps = store =>{\n  console.log('postId : ', store.comment.commentId)\n    return{\n      users : store.user.data,\n      userId : store.post.userId,\n      posts : store.post.data,\n      postId : store.comment.postId,\n      comments : store.comment.data,\n      commentId : store.comment.commentId\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n","import { SELECT_ITEM, GET_POSTS_REQUEST, GET_POSTS_SUCCESS, POST_POSTS_REQUEST, POST_POSTS_SUCCESS} from \"../actions\";\r\n\r\nconst initialState = {\r\n    userId : null,\r\n    data : [{ }]\r\n};\r\n\r\nexport const postsReducer  = (state = initialState, action)=>{\r\n    switch (action.type) {\r\n        case SELECT_ITEM:\r\n            return {...state, userId : action.payload };\r\n        case GET_POSTS_REQUEST:\r\n            return {...state};\r\n        case GET_POSTS_SUCCESS:\r\n            return {...state, data : action.payload};\r\n        case POST_POSTS_REQUEST:\r\n                return {...state};\r\n        case POST_POSTS_SUCCESS:\r\n                return ({...state});\r\n        default:\r\n            return state;\r\n    }\r\n}; \r\n","import {GET_USERS_REQUEST, GET_USERS_SUCCESS, SELECT_ITEM} from \"../actions\";\r\n\r\nconst initialState = {\r\n    data : [{}],\r\n};\r\n\r\nexport const userReducer  = (state = initialState, action)=>{\r\n    switch (action.type) {\r\n        case GET_USERS_REQUEST:\r\n            return {...state};\r\n        case GET_USERS_SUCCESS:\r\n            return {...state, data: action.payload};\r\n        case SELECT_ITEM:\r\n            return {...state, userId: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { SELECT_POST, SELECT_COMMENT, GET_COMMENT_REQUEST, GET_COMMENT_SUCCESS, EDIT_COMMENT_REQUEST, EDIT_COMMENT_SUCCESS} from \"../actions\";\r\n\r\nconst initialState = {\r\n    postId : null,\r\n    commentId : null,\r\n    data : [{ }]\r\n};\r\n\r\nexport const commentReducer  = (state = initialState, action)=>{\r\n    switch (action.type) {\r\n        case SELECT_POST:\r\n            return {...state, postId : action.payload };\r\n        case SELECT_COMMENT:\r\n            return {...state, commentId : action.payload };\r\n        case GET_COMMENT_REQUEST:\r\n            return {...state};\r\n        case GET_COMMENT_SUCCESS:\r\n            return {...state, data : action.payload};\r\n        case EDIT_COMMENT_REQUEST:\r\n            return{...state}\r\n        case EDIT_COMMENT_SUCCESS:\r\n            return({...state }, console.log('success'))\r\n        default:\r\n            return state;\r\n    }\r\n}; \r\n","import {combineReducers} from \"redux\";\r\nimport { postsReducer } from \"./postReducer\";\r\nimport {userReducer} from './usersReducer';\r\nimport {commentReducer} from './commentReducer';\r\n\r\nexport const Reducer = combineReducers({\r\n        user: userReducer,\r\n        post : postsReducer,\r\n        comment : commentReducer\r\n    }\r\n);","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { Reducer } from \"./reducer/reducer\";\r\n\r\n\r\nexport const store = createStore(Reducer, applyMiddleware(thunk));\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\"\nimport {HashRouter} from 'react-router-dom'\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n       <App/>\n     </HashRouter>\n    </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}